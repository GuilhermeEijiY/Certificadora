import React from 'react';
import './GuiaBoasPraticas.css'; // Importa o arquivo CSS

const dicas = [
  {
    titulo: 'üßº Nomeie vari√°veis de forma clara',
    exemploRuim: `let x = 10;
let fn = () => {};`,
    exemploBom: `let quantidadeDeAlunos = 10;
let calcularImposto = () => {};`,
    explicacao: 'Use nomes descritivos e completos que indiquem o prop√≥sito da vari√°vel ou fun√ß√£o. Evite abrevia√ß√µes desnecess√°rias.',
  },
  {
    titulo: 'üß± Quebre o c√≥digo em fun√ß√µes menores (SRP)',
    exemploRuim: `// Tudo misturado na mesma fun√ß√£o
function processarPedido(pedido) {
  // 1. Valida√ß√£o do pedido
  if (!pedido.id || pedido.valor <= 0) {
    throw new Error('Pedido inv√°lido.');
  }
  // 2. C√°lculo do total
  let total = pedido.itens.reduce((acc, item) => acc + item.preco * item.quantidade, 0);
  // 3. Aplica√ß√£o de desconto
  if (pedido.clienteFidelidade) {
    total *= 0.9; // 10% de desconto
  }
  // 4. Envio do pedido
  console.log('Enviando pedido...', total);
  // 5. Atualiza√ß√£o de estoque
  // ...
}`,
    exemploBom: `// Fun√ß√µes com responsabilidades √∫nicas
function validarPedido(pedido) {
  if (!pedido.id || pedido.valor <= 0) {
    throw new Error('Pedido inv√°lido.');
  }
  return true;
}

function calcularTotal(pedido) {
  let total = pedido.itens.reduce((acc, item) => acc + item.preco * item.quantidade, 0);
  if (pedido.clienteFidelidade) {
    total *= 0.9;
  }
  return total;
}

function enviarPedido(pedido, total) {
  console.log('Enviando pedido com total:', total);
  // L√≥gica de envio...
}

function processarPedidoRefatorado(pedido) {
  validarPedido(pedido);
  const totalCalculado = calcularTotal(pedido);
  enviarPedido(pedido, totalCalculado);
  // atualizarEstoque(pedido);
}`,
    explicacao: 'Siga o Princ√≠pio da Responsabilidade √önica (SRP): cada fun√ß√£o deve ter apenas um motivo para mudar. Isso torna o c√≥digo mais f√°cil de entender, testar e manter.',
  },
  {
    titulo: 'üßæ Comente o "porqu√™", n√£o o "o qu√™"',
    exemploRuim: `// Inicializa a vari√°vel 'i' com 0
for (let i = 0; i < 10; i++) {
  // Imprime o valor de 'i'
  console.log(i);
}`,
    exemploBom: `// Corre√ß√£o de bug: Certificar-se de que o loop come√ßa em 0 para incluir o primeiro elemento do array.
for (let i = 0; i < array.length; i++) {
  console.log(array[i]);
}`,
    explicacao: 'O bom c√≥digo se explica. Coment√°rios s√£o para explicar decis√µes complexas, otimiza√ß√µes, ou o "porqu√™" de uma escolha que n√£o √© imediatamente √≥bvia, e n√£o para reescrever o que o c√≥digo j√° mostra.',
  },
  {
    titulo: '‚õî Evite repeti√ß√£o (Princ√≠pio DRY)',
    exemploRuim: `function exibirErroConexao() {
  alert("Erro de conex√£o!");
  console.error("Conex√£o falhou.");
}

function exibirErroServidor() {
  alert("Erro no servidor!");
  console.error("Servidor inacess√≠vel.");
}`,
    exemploBom: `function exibirMensagemErro(tipoErro, detalhes) {
  alert(\`Erro de \${tipoErro}!\`);
  console.error(\`\${tipoErro} falhou: \${detalhes}\`);
}

// Uso:
exibirMensagemErro("conex√£o", "Conex√£o de rede perdida.");
exibirMensagemErro("servidor", "API indispon√≠vel.");`,
    explicacao: 'DRY (Don\'t Repeat Yourself - N√£o se Repita): Se voc√™ est√° escrevendo o mesmo c√≥digo v√°rias vezes, transforme-o em uma fun√ß√£o ou um m√≥dulo reutiliz√°vel. Isso reduz bugs e facilita a manuten√ß√£o.',
  },
  {
    titulo: '‚ú® Mantenha o c√≥digo formatado (indenta√ß√£o)',
    exemploRuim: `function minhaFuncao() {
if (condicao) {
console.log("Ol√°");
}
else {
console.log("Adeus");
}
}`,
    exemploBom: `function minhaFuncao() {
  if (condicao) {
    console.log("Ol√°");
  } else {
    console.log("Adeus");
  }
}`,
    explicacao: 'Use indenta√ß√£o consistente para mostrar a estrutura do seu c√≥digo. Ferramentas como Prettier ou ESLint podem formatar automaticamente.',
  },
  {
    titulo: 'üö´ Evite n√∫meros "m√°gicos"',
    exemploRuim: `// C√°lculo do imposto
let imposto = salario * 0.15;`,
    exemploBom: `const TAXA_IMPOSTO = 0.15; // Define a taxa de imposto como uma constante
let imposto = salario * TAXA_IMPOSTO;`,
    explicacao: 'N√∫meros "m√°gicos" s√£o valores literais cujo significado n√£o √© imediatamente √≥bvio. Use constantes bem nomeadas para dar clareza e facilitar futuras altera√ß√µes.',
  },
  {
    titulo: '‚úÖ Valide entradas de fun√ß√µes',
    exemploRuim: `function dividir(a, b) {
  return a / b; // E se b for 0?
}`,
    exemploBom: `function dividir(a, b) {
  if (b === 0) {
    console.error("Erro: Divis√£o por zero!");
    return null; // Ou jogue um erro, dependendo do contexto
  }
  if (typeof a !== 'number' || typeof b !== 'number') {
    console.error("Erro: Ambos os argumentos devem ser n√∫meros.");
    return null;
  }
  return a / b;
}`,
    explicacao: 'Sempre que poss√≠vel, valide os par√¢metros que suas fun√ß√µes recebem para evitar comportamentos inesperados e erros em tempo de execu√ß√£o.',
  },
  {
    titulo: '‚ùå Evite efeitos colaterais inesperados',
    exemploRuim: `let totalGlobal = 0;
function adicionar(valor) {
  totalGlobal += valor; // Modifica uma vari√°vel global
}`,
    exemploBom: `function adicionar(valor1, valor2) {
  return valor1 + valor2; // Retorna um novo valor, sem alterar estado externo
}

// Uso:
let novoTotal = adicionar(totalAtual, 5);`,
    explicacao: 'Fun√ß√µes "puras" (que n√£o modificam vari√°veis externas e sempre retornam o mesmo resultado para os mesmos inputs) s√£o mais f√°ceis de testar e entender. Minimize efeitos colaterais.',
  },
  {
    titulo: '‚ö° Otimize para legibilidade, n√£o para velocidade prematura',
    exemploRuim: `for (let i=0;i<array.length;i++){doSomething(array[i])}`,
    exemploBom: `for (let i = 0; i < array.length; i++) {
  const item = array[i];
  doSomething(item);
}`,
    explicacao: 'N√£o se preocupe em otimizar o c√≥digo para ser ultra-r√°pido antes que voc√™ saiba que ele √© um gargalo de desempenho. Priorize a clareza e a legibilidade. Compiladores e interpretadores modernos s√£o muito bons em otimiza√ß√µes.',
  },
  {
    titulo: '‚ôªÔ∏è Use `const` e `let`, evite `var`',
    exemploRuim: `var nome = "Alice";
var idade = 30; // 'var' tem escopo de fun√ß√£o, n√£o de bloco
if (true) {
  var nome = "Bob"; // Redeclara 'nome' globalmente
}`,
    exemploBom: `const NOME_APLICATIVO = "MeuApp"; // Valor n√£o muda
let contador = 0; // Valor pode ser reatribu√≠do
if (true) {
  let tempIdade = 25; // 'let' tem escopo de bloco, mais seguro
}`,
    explicacao: '`const` para vari√°veis que n√£o ser√£o reatribu√≠das (imut√°veis). `let` para vari√°veis que ser√£o reatribu√≠das (mut√°veis). `var` tem problemas de "hoisting" e escopo que podem levar a bugs.',
  },
];

const GuiaBoasPraticas = () => {
  return (
    <div className="guia-container"> {/* MODIFICADO: Chamando a classe do CSS externo */}
      <h1 className="guia-titulo">üß≠ Guia de Boas Pr√°ticas em C√≥digo</h1> {/* MODIFICADO: Chamando a classe do CSS externo */}
      <p className="intro-text"> {/* MODIFICADO: Chamando a classe do CSS externo */}
        Aprenda a escrever c√≥digo mais limpo, leg√≠vel e eficiente com exemplos simples e dicas visuais. Ideal para quem est√° come√ßando!
      </p>
      {dicas.map((dica, index) => (
        <div key={index} className="dica-card"> {/* MODIFICADO: Chamando a classe do CSS externo */}
          <h2 className="dica-titulo">{dica.titulo}</h2> {/* MODIFICADO: Chamando a classe do CSS externo */}
          <p className="explicacao-text">{dica.explicacao}</p> {/* MODIFICADO: Chamando a classe do CSS externo */}
          <div className="code-examples-grid"> {/* MODIFICADO: Chamando a classe do CSS externo */}
            <div>
              <p className="status-bad">Ruim:</p> {/* MODIFICADO: Chamando a classe do CSS externo */}
              <pre className="code-block bad-example">{dica.exemploRuim}</pre> {/* MODIFICADO: Chamando a classe do CSS externo */}
            </div>
            <div>
              <p className="status-good">Melhor:</p> {/* MODIFICADO: Chamando a classe do CSS externo */}
              <pre className="code-block good-example">{dica.exemploBom}</pre> {/* MODIFICADO: Chamando a classe do CSS externo */}
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default GuiaBoasPraticas;